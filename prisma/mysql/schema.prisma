generator client {
    provider = "prisma-client-js"
    output   = "../generated/mysql"
}

datasource db {
    provider = "mysql"
    url      = env("MYSQL_DB_URL")
}

enum OrderStatus {
    PENDING
    IN_PROGRESS
    CANCELED
    COMPLETED
}

enum statusStore {
    ACTIVE
    INACTIVE
}

enum statusProduct {
    ACTIVE
    INACTIVE
}

enum MovementType {
    IN
    OUT
    ADJUSTMENT
}

model Order {
    id          Int         @id @default(autoincrement())
    customerId  String
    status      OrderStatus @default(PENDING)
    totalAmount Float //sum de subordenes
    latitude    Float
    longitude   Float
    address     String
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    subOrders   SubOrders[]
    Store       Store?      @relation(fields: [storeId], references: [id])
    storeId     Int?
}

model SubOrders {
    id         Int         @id @default(autoincrement())
    orderId    Int
    order      Order       @relation(fields: [orderId], references: [id])
    storeId    Int
    store      Store       @relation(fields: [storeId], references: [id])
    deliveryId String
    status     OrderStatus @default(PENDING)
    subTotal   Float
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    orderItems OrderItem[]
}

model OrderItem {
    id         Int       @id @default(autoincrement())
    subOrderId Int
    subOrder   SubOrders @relation(fields: [subOrderId], references: [id])
    productId  Int
    product    Product   @relation(fields: [productId], references: [id])
    quantity   Int
    unitPrice  Float
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
}

model Store {
    id         Int         @id @default(autoincrement())
    id_almacen String      @unique
    name       String      @unique
    address    String      @unique
    latitude   Float
    longitude  Float
    cityId     Int
    city       City        @relation(fields: [cityId], references: [id])
    capacity   Int
    zipCode    Float
    status     statusStore @default(ACTIVE)
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    orders     Order[]
    inventory  Inventory[]
    SubOrders  SubOrders[]
}

model City {
    id           Int        @id @default(autoincrement())
    name         String
    departmentId Int
    department   Department @relation(fields: [departmentId], references: [id])
    stores       Store[]
}

model Department {
    id     Int    @id @default(autoincrement())
    name   String
    cities City[]
}

model Category {
    id          Int       @id @default(autoincrement())
    name        String    @unique
    description String
    isActive    Boolean
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    products    Product[]
}

model Product {
    id                    Int           @id @default(autoincrement())
    id_producto           String        @unique
    id_proveedor          String
    name                  String
    description           String
    sku                   String
    categoryId            Int
    category              Category      @relation(fields: [categoryId], references: [id])
    unitPrice             Float
    weight                Float
    isFragile             Boolean
    dimensionsCm          String
    imageUrl              String
    barCode               String
    requiredRefrigeration Boolean
    dateOfExpiration      DateTime
    status                statusProduct @default(ACTIVE)
    createdAt             DateTime      @default(now())
    updatedAt             DateTime      @updatedAt
    inventory             Inventory[]
    orderItems            OrderItem[]
}

model Inventory {
    id                 Int                  @id @default(autoincrement())
    productId          Int
    product            Product              @relation(fields: [productId], references: [id])
    storeId            Int
    store              Store                @relation(fields: [storeId], references: [id])
    availableQuantity  Int
    minimumThreshold   Int
    lastResetDate      DateTime
    createdAt          DateTime             @default(now())
    updatedAt          DateTime             @updatedAt
    historicalMovement HistoricalMovement[]
}

model HistoricalMovement {
    id           Int          @id @default(autoincrement())
    inventoryId  Int
    inventory    Inventory    @relation(fields: [inventoryId], references: [id])
    user         String
    movementDate DateTime
    reason       String
    movementType MovementType
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
}